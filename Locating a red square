import cv2
import numpy as np

# Define the HSV color range for red
lower_red1 = np.array([0, 120, 70], dtype="uint8")
upper_red1 = np.array([10, 255, 255], dtype="uint8")
lower_red2 = np.array([170, 120, 70], dtype="uint8")
upper_red2 = np.array([180, 255, 255], dtype="uint8")


cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break

    # Convert the frame to HSV color space
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Create masks for the red color
    mask1 = cv2.inRange(hsv_frame, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv_frame, lower_red2, upper_red2)
    red_mask = cv2.bitwise_or(mask1, mask2)

    # Perform morphological operations to remove noise
    red_mask = cv2.erode(red_mask, None, iterations=2)
    red_mask = cv2.dilate(red_mask, None, iterations=2)

    # Find contours in the mask
    contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # Calculate the area of the contour
        area = cv2.contourArea(contour)
        if area > 500:  # Filter out small areas
            # Approximate the contour to check if it forms a square
            epsilon = 0.04 * cv2.arcLength(contour, True)
            approx = cv2.approxPolyDP(contour, epsilon, True)

            if len(approx) == 4:  # Square has 4 sides
                # Get the bounding box of the contour
                x, y, w, h = cv2.boundingRect(approx)
                aspect_ratio = float(w) / h

                # Check if the bounding box is roughly square-shaped
                if 0.9 < aspect_ratio < 1.1:
                    # Draw the contour and bounding box on the frame
                    cv2.drawContours(frame, [approx], -1, (0, 255, 0), 2)
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
                    cv2.putText(frame, "Red Square", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                    # Print the coordinates of the square's center
                    cx = x + w // 2
                    cy = y + h // 2
                    print(f"Red square centroid coordinates: ({cx}, {cy})")

    # Show the frame with detected red square
    cv2.imshow('Frame', frame)

    # Exit the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv2.destroyAllWindows()
