import cv2
import numpy as np

# Known parameters
KNOWN_WIDTH = 7.0  # Real width
FOCAL_LENGTH = 800  # Focal length of the camera (in pixels)

# HSV color range for red
lower_red1 = np.array([0, 150, 100], dtype="uint8")
upper_red1 = np.array([10, 255, 255], dtype="uint8")
lower_red2 = np.array([170, 150, 100], dtype="uint8")
upper_red2 = np.array([180, 255, 255], dtype="uint8")

# open camera 
cap = cv2.VideoCapture(1)

def calculate_distance(focal_length, real_width, width_in_image):
    """Calculate distance from the camera to the object."""
    return (real_width * focal_length) / width_in_image

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break

    # Convert the frame to HSV color space
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Create masks for the red color
    mask1 = cv2.inRange(hsv_frame, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv_frame, lower_red2, upper_red2)
    red_mask = cv2.bitwise_or(mask1, mask2)

    # Apply a Gaussian blur to the mask to reduce noise and smooth the mask
    red_mask = cv2.GaussianBlur(red_mask, (7, 7), 0)

    # Apply median blur to reduce salt-and-pepper noise
    red_mask = cv2.medianBlur(red_mask, 5)

    # Perform morphological closing to fill small holes inside the red areas
    kernel = np.ones((5, 5), np.uint8)
    red_mask = cv2.morphologyEx(red_mask, cv2.MORPH_CLOSE, kernel)

    # Perform additional morphological operations to refine the mask
    red_mask = cv2.erode(red_mask, kernel, iterations=2)
    red_mask = cv2.dilate(red_mask, kernel, iterations=3)

    # Create a black background of the same size as the original frame
    black_background = np.zeros_like(frame)

    # Use the red mask to get only the red areas from the original frame
    red_areas = cv2.bitwise_and(frame, frame, mask=red_mask)

    # Overlay the detected red areas onto the black background
    black_background_with_red = cv2.add(black_background, red_areas)

    # Create a black background for showing red areas in white
    white_red_background = np.zeros_like(frame)

    # Convert the red mask to a white overlay
    white_red_mask = np.zeros_like(frame)
    white_red_mask[red_mask > 0] = [255, 255, 255]

    # Overlay the white red mask on the black background
    white_red_background = cv2.add(white_red_background, white_red_mask)

    # Find contours in the mask
    contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # Calculate the area of the contour
        area = cv2.contourArea(contour)
        if area > 500:  # Filter out small areas
            # Approximate the contour to check if it forms a square
            epsilon = 0.04 * cv2.arcLength(contour, True)
            approx = cv2.approxPolyDP(contour, epsilon, True)

            if len(approx) == 4:  # Square has 4 sides
                # Get the bounding box of the contour
                x, y, w, h = cv2.boundingRect(approx)
                aspect_ratio = float(w) / h

                # Check if the bounding box is roughly square-shaped
                if 0.9 < aspect_ratio < 1.1:
                    # Draw the contour and bounding box on the black background
                    cv2.drawContours(black_background_with_red, [approx], -1, (0, 255, 0), 2)
                    cv2.rectangle(black_background_with_red, (x, y), (x + w, y + h), (255, 0, 0), 2)
                    cv2.putText(black_background_with_red, "Red Square", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                    # Calculate the centroid of the red square
                    M = cv2.moments(contour)
                    if M["m00"] != 0:
                        cx = int(M["m10"] / M["m00"])
                        cy = int(M["m01"] / M["m00"])

                        # Draw the centroid on the black background
                        cv2.circle(black_background_with_red, (cx, cy), 5, (255, 255, 0), -1)
                        cv2.putText(black_background_with_red, f"Centroid: ({cx}, {cy})", (cx + 10, cy - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)

                        # Draw the centroid on the white mask
                        cv2.circle(white_red_background, (cx, cy), 5, (0, 0, 0), -1)
                        cv2.putText(white_red_background, f"Centroid: ({cx}, {cy})", (cx + 10, cy - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)

                        # Print the coordinates of the centroid
                        print(f"Red square centroid coordinates: ({cx}, {cy})")

                        # Calculate and display the distance to the red square
                        distance = calculate_distance(FOCAL_LENGTH, KNOWN_WIDTH, w)  # Use width of bounding box
                        cv2.putText(black_background_with_red, f"Distance: {distance:.2f} cm", (x, y - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                        print(f"Distance to Red Square: {distance:.2f} cm")

    # Show the original colored frame
    cv2.imshow('Colored Frame', frame)

    # Show the black background with detected red areas
    cv2.imshow('Red Areas on Black Background', black_background_with_red)

    # Show the detected red areas as white on black background with centroids
    cv2.imshow('White Red Areas with Centroids on Black Background', white_red_background)

    # Exit the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv2.destroyAllWindows()
