import cv2
import numpy as np
import glob

# Termination criteria for refining corner detection
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Prepare object points for a 7x5 checkerboard
objp = np.zeros((7*5, 3), np.float32)
objp[:, :2] = np.mgrid[0:7, 0:5].T.reshape(-1, 2)

# Arrays to store object points and image points
objpoints = []
imgpoints = []

# Load the saved calibration images
images = glob.glob(r"D:\calibration images\*.png")  # Note the r prefix


if not images:
    print("No calibration images found in the directory.")
    exit()

for fname in images:
    img = cv2.imread(fname)
    if img is None:
        print(f"Failed to load image: {fname}")
        continue

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Find the chessboard corners
    ret, corners = cv2.findChessboardCorners(gray, (7, 5), None)

    if ret:
        # Refine the corners
        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        imgpoints.append(corners2)
        objpoints.append(objp)

        # Draw and display the corners
        cv2.drawChessboardCorners(img, (7, 5), corners2, ret)
        cv2.imshow('img', img)
        cv2.waitKey(500)
    else:
        print(f"Chessboard corners not found in {fname}")

cv2.destroyAllWindows()

# Perform camera calibration
if objpoints and imgpoints:
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

    if ret:
        # Record the focal length
        focal_length = mtx[0, 0]

        # Save calibration results including focal length
        np.savez('calibration images.npz', mtx=mtx, dist=dist, rvecs=rvecs, tvecs=tvecs, focal_length=focal_length)
    else:
        print("Calibration failed.")
else:
    print("Calibration failed: Not enough valid images.")
