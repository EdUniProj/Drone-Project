import cv2
import numpy as np
import glob

# Termination criteria for refining corner detection
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Prepare object points, like (0,0,0), (1,0,0), (2,0,0), ..., (6,4,0)
# Change the (5*7) to match your checkerboard's pattern size (number of internal corners)
objp = np.zeros((5*7, 3), np.float32)
objp[:, :2] = np.mgrid[0:7, 0:5].T.reshape(-1, 2)

# Arrays to store object points and image points from all the images
objpoints = []  # 3D points in real-world space
imgpoints = []  # 2D points in image plane

# Load the saved calibration images
images = glob.glob(r'D:\calibration_images\*.png')  # Use raw string and specify file extension
 # Update the path to your images

if not images:
    print("No calibration images found in the directory.")
    exit()

for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Find the chessboard corners (7x5 internal corners for your checkerboard)
    ret, corners = cv2.findChessboardCorners(gray, (7, 5), None)

    if ret:
        # Refine the corners
        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        imgpoints.append(corners2)
        objpoints.append(objp)

        # Draw and display the corners
        cv2.drawChessboardCorners(img, (7, 5), corners2, ret)
        cv2.imshow('img', img)
        cv2.waitKey(500)

cv2.destroyAllWindows()

# Perform camera calibration
if objpoints and imgpoints:
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

    # Save calibration results
    np.savez('camera_calibration.npz', mtx=mtx, dist=dist, rvecs=rvecs, tvecs=tvecs)

    # Record the focal length
    focal_length = mtx[0, 0]  # This is the focal length in pixels along the x-axis
    print("Focal Length (in pixels):", focal_length)
else:
    print("Calibration failed: Not enough valid images.")
